name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ENVIRONMENT: prod

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      function-name: ${{ steps.cfn-outputs.outputs.function-name }}
      role-arn: ${{ steps.cfn-outputs.outputs.role-arn }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_BOOTSTRAP_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file aws/template.yml \
            --stack-name email-service-${{ env.ENVIRONMENT }} \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              GithubOrg=${{ github.repository_owner }} \
              GithubRepo=${{ github.event.repository.name }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset \
            --on-failure DELETE
      
      - name: Get CloudFormation outputs
        id: cfn-outputs
        run: |
          STACK_NAME="email-service-${{ env.ENVIRONMENT }}"
          echo "function-name=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' --output text)" >> $GITHUB_OUTPUT
          echo "role-arn=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`GitHubActionsRoleArn`].OutputValue' --output text)" >> $GITHUB_OUTPUT

  build-and-deploy:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run type-check || npx tsc --noEmit
    
    - name: Build
      run: npm run build
    
    - name: Create deployment package
      run: |
        cd dist
        zip -r ../function.zip .
        cd ..
        zip -ur function.zip node_modules
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: function-artifact
        path: function.zip
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ needs.deploy-infrastructure.outputs.role-arn }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to Lambda
      if: github.ref == 'refs/heads/master'
      run: |
        aws lambda update-function-code \
          --function-name ${{ needs.deploy-infrastructure.outputs.function-name }} \
          --zip-file fileb://function.zip