AWSTemplateFormatVersion: '2010-09-09'
Description: 'Email Service Infrastructure'

Parameters:
  GithubOrg:
    Type: String
    Default: imcadams
    Description: GitHub organization/username
  GithubRepo:
    Type: String
    Default: email-service
    Description: GitHub repository name
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - prod

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
        - PolicyName: ApiKeySecretUpdatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                Resource: !Sub "arn:aws:apigateway:${AWS::Region}::/apikeys/*"
              - Effect: Allow
                Action:
                  - secretsmanager:PutSecretValue
                Resource: !Ref ApiKeySecret

  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GithubOrg}/${GithubRepo}:*
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
      Policies:
        - PolicyName: LambdaDeployment
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                  - lambda:UpdateFunctionConfiguration
                Resource: !GetAtt EmailFunction.Arn
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*

  EmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: "Function created, waiting for deployment" })
            };
          };
      Timeout: 30
      MemorySize: 128

  EmailApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub email-service-api-${Environment}
      Description: API Gateway for Email Service

  EmailApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EmailApi
      ParentId: !GetAtt EmailApi.RootResourceId
      PathPart: "email"

  EmailApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EmailApi
      ResourceId: !Ref EmailApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EmailFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  EmailApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: EmailApiMethod
    Properties:
      RestApiId: !Ref EmailApi

  EmailApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref EmailApi
      DeploymentId: !Ref EmailApiDeployment
      StageName: !Ref Environment

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EmailFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EmailApi}/*/${Environment}/email

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: EmailApiStage
    Properties:
      Description: !Sub "API Key for Email Service (${Environment})"
      Enabled: true
      StageKeys:
        - RestApiId: !Ref EmailApi
          StageName: !Ref Environment

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: EmailApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref EmailApi
          Stage: !Ref Environment
      Description: Usage plan for Email Service
      UsagePlanName: !Sub email-service-usage-plan-${Environment}

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - UsagePlan
      - ApiKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub email-service-${Environment}-apikey
      Description: API Key for Email Service
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "apikey"

  ApiKeySecretUpdate:
    Type: AWS::Lambda::Function
    DependsOn: ApiKey
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const https = require('https');
          const url = require('url');
          // Corrected: Uses AWS SDK v3, which is included in the Node.js 18 runtime.
          const { APIGatewayClient, GetApiKeyCommand } = require("@aws-sdk/client-api-gateway");
          const { SecretsManagerClient, PutSecretValueCommand } = require("@aws-sdk/client-secrets-manager");

          exports.handler = async (event, context) => {
            const sendResponse = (status, responseData) => {
              return new Promise((resolve, reject) => {
                const responseBody = JSON.stringify({
                  Status: status,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: event.PhysicalResourceId || context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData,
                });
                const parsedUrl = url.parse(event.ResponseURL);
                const options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: { "content-type": "", "content-length": responseBody.length },
                };
                const request = https.request(options, resolve);
                request.on("error", reject);
                request.write(responseBody);
                request.end();
              });
            };
            
            if (event.RequestType === 'Delete') {
              await sendResponse("SUCCESS", {});
              return;
            }
            
            try {
              const apigatewayClient = new APIGatewayClient({});
              const secretsManagerClient = new SecretsManagerClient({});

              const getApiKeyResponse = await apigatewayClient.send(
                new GetApiKeyCommand({ apiKey: event.ResourceProperties.apiKeyId, includeValue: true })
              );
              const apiKeyValue = getApiKeyResponse.value;

              await secretsManagerClient.send(
                new PutSecretValueCommand({
                  SecretId: event.ResourceProperties.secretName,
                  SecretString: JSON.stringify({ apikey: apiKeyValue })
                })
              );

              await sendResponse("SUCCESS", { ApiKeyValue: apiKeyValue });
            } catch (error) {
              console.error("Caught an error:", error);
              await sendResponse("FAILED", { Error: error.message });
            }
          };

  UpdateApiKeySecret:
    Type: Custom::ApiKeySecretUpdate
    Properties:
      ServiceToken: !GetAtt ApiKeySecretUpdate.Arn
      apiKeyId: !Ref ApiKey
      secretName: !Ref ApiKeySecret

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref EmailFunction
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt EmailFunction.Arn
  GitHubActionsRoleArn:
    Description: ARN of the GitHub Actions role
    Value: !GetAtt GitHubActionsRole.Arn
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${EmailApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/email
  ApiKey:
    Description: API Key Value
    Value: !GetAtt ApiKey.APIKeyId
  ApiKeyValue:
    Description: API Key Secret Value
    Value: !Sub '{{resolve:secretsmanager:${ApiKey}:SecretString:APIKey}}'
