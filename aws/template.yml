AWSTemplateFormatVersion: '2010-09-09'
Description: 'Email Service Infrastructure'

Parameters:
  GithubOrg:
    Type: String
    Default: imcadams
    Description: GitHub organization/username
  GithubRepo:
    Type: String
    Default: email-service
    Description: GitHub repository name
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - prod

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GithubOrg}/${GithubRepo}:*
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
      Policies:
        - PolicyName: LambdaDeployment
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                  - lambda:UpdateFunctionConfiguration
                Resource: !GetAtt EmailFunction.Arn
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*

  EmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub email-service-${Environment}
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: "Function created, waiting for deployment" })
            };
          };
      Timeout: 30
      MemorySize: 128

  EmailApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub email-service-api-${Environment}
      Description: API Gateway for Email Service

  EmailApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EmailApi
      ParentId: !GetAtt EmailApi.RootResourceId
      PathPart: "email"

  EmailApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EmailApi
      ResourceId: !Ref EmailApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EmailFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  EmailApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: EmailApiMethod
    Properties:
      RestApiId: !Ref EmailApi

  EmailApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref EmailApi
      DeploymentId: !Ref EmailApiDeployment
      StageName: !Ref Environment

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EmailFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EmailApi}/*/${Environment}/email

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: EmailApiStage # Corrected: Added dependency on the API Stage
    Properties:
      Name: !Sub email-service-apikey-${Environment}
      Description: API Key for Email Service
      Enabled: true
      StageKeys:
        - RestApiId: !Ref EmailApi
          StageName: !Ref Environment

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: EmailApiStage # Corrected: Added dependency on the API Stage
    Properties:
      ApiStages:
        - ApiId: !Ref EmailApi
          Stage: !Ref Environment
      Description: Usage plan for Email Service
      UsagePlanName: !Sub email-service-usage-plan-${Environment}

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn: # Added for good practice to ensure UsagePlan and ApiKey exist first
      - UsagePlan
      - ApiKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub email-service-${Environment}-apikey
      Description: API Key for Email Service
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "apikey"

  ApiKeySecretUpdate:
    Type: AWS::Lambda::Function
    DependsOn: ApiKey
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const response = require('cfn-response');
          exports.handler = async (event, context) => {
            try {
              const apigateway = new AWS.APIGateway();
              const secretsManager = new AWS.SecretsManager();

              const apiKey = await apigateway.getApiKey({
                apiKey: event.ResourceProperties.apiKeyId,
                includeValue: true
              }).promise();

              await secretsManager.putSecretValue({
                SecretId: event.ResourceProperties.secretName,
                SecretString: JSON.stringify({ apikey: apiKey.value })
              }).promise();

              await response.send(event, context, response.SUCCESS, {});
            } catch (error) {
              console.error(error);
              await response.send(event, context, response.FAILED, {});
            }
          };

  UpdateApiKeySecret:
    Type: Custom::ApiKeySecretUpdate
    Properties:
      ServiceToken: !GetAtt ApiKeySecretUpdate.Arn
      apiKeyId: !Ref ApiKey
      secretName: !Ref ApiKeySecret

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref EmailFunction
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt EmailFunction.Arn
  GitHubActionsRoleArn:
    Description: ARN of the GitHub Actions role
    Value: !GetAtt GitHubActionsRole.Arn
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${EmailApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/email
  ApiKey:
    Description: API Key Value
    Value: !GetAtt ApiKey.APIKeyId
  ApiKeyValue:
    Description: API Key Secret Value
    Value: !Sub '{{resolve:secretsmanager:${ApiKey}:SecretString:APIKey}}'